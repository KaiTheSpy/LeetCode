/*
Problem: Median of Two Sorted Arrays
Difficulty: Hard

Prompt:

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

Example 3:

Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:

Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:

Input: nums1 = [2], nums2 = []
Output: 2.00000

Constraints:

    nums1.length == m
    nums2.length == n
    0 <= m <= 1000
    0 <= n <= 1000
    1 <= m + n <= 2000
    -10^6 <= nums1[i], nums2[i] <= 10^6

*/
import java.util.*;
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int[] newList = mergedLists(nums1, nums2);
        Arrays.sort(newList);
        return newList.length % 2 == 0 ? 
            //If the list is even, then find the average between 2 middle values
           ((double) newList[newList.length / 2] 
            + (double) newList[(newList.length / 2) - 1]) / 2.0
            //If the lsit is odd, return middle value
            : (double) newList[newList.length / 2];
    }
    /**
        Merge lists
    */
    private int[] mergedLists(int[] n1, int[] n2){
        int[] m = new int[n1.length + n2.length]; 
        int i;
        for (i = 0; i < n1.length; i++){
            m[i] = n1[i];
        }
        for (int j = 0; j < n2.length; j++){
            m[i + j] = n2[j];
        }
        return m;
    }
}
